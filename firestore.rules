/**
 * @fileoverview Firestore Security Rules for the college canteen ordering system.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of use and debuggability by using simple collections
 * and avoiding complex subcollections. It enforces a public-read, owner-write model
 * for the `/inventory` collection and allows authenticated users to create, modify,
 * and delete their own orders.
 *
 * Data Structure:
 * - /inventory/{itemId}: Publicly accessible menu items.
 * - /orders/{orderId}: Orders placed by customers.
 * - /orderItems/{orderItemId}: Items within a specific order.
 *
 * Key Security Decisions:
 * - Public read access to the `/inventory` collection to allow anyone to view the menu.
 * - Orders do not belong to any specific user. There is no concept of ownership of orders.
 * - Clients are trusted to set correct data, so there is no data validation, except for required relational integrity.
 * - No data type validation is performed.
 *
 * Denormalization for Authorization:
 *  N/A
 *
 * Structural Segregation:
 * The `inventory` collection is separate from user-specific order data, simplifying
 * security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the inventory, while restricting writes.
     * @path /inventory/{itemId}
     * @allow (get, list): Any user can read the inventory.
     * @deny (create, update, delete): No one can create, update, or delete inventory items through the client.
     * @principle Public read, restricted write for globally available data.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to create orders.
     * @path /orders/{orderId}
     * @allow (create): Any authenticated user can create an order.
     * @deny (get, list, update, delete): Orders do not belong to any specific user and no access is allowed.
     * @principle: No authorization check.
     */
    match /orders/{orderId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Allows anyone to create orderItems.
     * @path /orderItems/{orderItemId}
     * @allow (create): Any authenticated user can create an order item.
     * @deny (get, list, update, delete): orderItems do not belong to any specific user and no access is allowed.
     * @principle: No authorization check.
     */
    match /orderItems/{orderItemId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}