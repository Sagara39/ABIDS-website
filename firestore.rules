/**
 * @fileoverview Firestore Security Rules for the canteen ordering system.
 *
 * Core Philosophy:
 * This ruleset prioritizes simplicity and security for a canteen ordering system.
 * It provides public read access to menu items and restricts write access to orders and order items.
 *
 * Data Structure:
 * The database consists of three top-level collections: `menuItems`, `orders`, and `orderItems`.
 *  - `menuItems`: Contains publicly accessible information about menu items.
 *  - `orders`: Contains order information.
 *  - `orderItems`: Contains individual items within an order.
 *
 * Key Security Decisions:
 *  - Menu items are publicly readable, as they are not user-specific.
 *  - Orders and order items require authentication for any operation.  However, there is no validation logic implemented for write operations.
 *
 * Denormalization for Authorization:
 *  - No denormalization is used in this simplified model. All write operations are protected only by authentication.
 *
 * Structural Segregation:
 *  - The separation of `menuItems` from `orders` and `orderItems` allows for public read access to the menu without exposing order data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to menu items.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) Any user can read menu items.
     * @deny (create, update, delete) No user can create, update, or delete menu items through the client.
     * @principle Grants public read access to non-sensitive data, while restricting write access.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to orders.
     * @path /orders/{orderId}
     * @allow (create) Any authenticated user can create an order.
     * @allow (get, list) Any authenticated user can read orders.
     * @deny (update, delete) No user can update or delete orders through the client.
     * @principle Requires authentication for order creation.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Restricts access to order items.
     * @path /orderItems/{orderItemId}
     * @allow (create) Any authenticated user can create an order item.
     * @allow (get, list) Any authenticated user can read order items.
     * @deny (update, delete) No user can update or delete order items through the client.
     * @principle Requires authentication for order item creation.
     */
    match /orderItems/{orderItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}